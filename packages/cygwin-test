#!/bin/sh

#Copyright (c) 2014 Luigi Tarenga <luigi.tarenga@gmail.com>
#Distributed under the terms of a MIT license.

# WARNING: CYGWIN has very slow and computing intensive fork() emulation. 

# start of configuration section

pace=4
timeout=20
start_timeout=10
stop_timeout=10

#ip_0=192.168.68.68; prefix_0=24; netdev_0=eth0
vip_ip_0=10.0.2.101; vip_netmask_0=255.255.255.0; vip_netdev_0=eth0

# end of configuration section

cd ${0%/*}
os=$(uname)

case $1 in
 echo)
   eval echo \$$2
 ;;

 start)
   #each module can exit with 1 on error and stop the start procedure
   #for maintenance you can wrap all with () and add maintenance module
   #(
   #. functions/storage.$os
   . functions/network.$os
   # --- programs start ---
   #)
   #. functions/maintenance.$os

   #if this point is reached then everything was ok. return 0
   exit 0
 ;;

 stop)
   ret=0
   # each module should try to not exit and let other modules execute
   # --- programs stop ---
   . functions/network.$os
   #. functions/storage.$os
   #. functions/maintenance.$os

   #modules can set ret to 1 to signal an error
   exit $ret
 ;;

 status)
   num_check=0
   failed_check=0

   . functions/network.$os
   #. functions/storage.$os
   #. functions/maintenance.$os

   #by default if num_check=0 you will exit with 1. package is down.
   [ "$failed_check" -eq "$num_check" ] && exit 1
   [ "$failed_check" -eq "0" ] && exit 0
   exit 2
 ;;
esac
